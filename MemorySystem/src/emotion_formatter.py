"""
üé≠ –§–æ—Ä–º–∞—Ç—Ç–µ—Ä —ç–º–æ—Ü–∏–π –¥–ª—è Memory System
–°–æ–∑–¥–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –ò–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import logging
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from enum import Enum

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class EmotionComplexity(Enum):
    """–£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —ç–º–æ—Ü–∏–π"""
    SIMPLE = "simple"      # –û–¥–Ω–∞ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —ç–º–æ—Ü–∏—è
    MEDIUM = "medium"      # –î–≤–µ —ç–º–æ—Ü–∏–∏ —Å —Ä–∞–∑–Ω–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é
    COMPLEX = "complex"    # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏ –∏–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã

@dataclass
class EmotionData:
    """–î–∞–Ω–Ω—ã–µ –æ–± —ç–º–æ—Ü–∏—è—Ö"""
    primary_emotion: str
    primary_confidence: float
    secondary_emotion: Optional[str] = None
    secondary_confidence: Optional[float] = None
    tertiary_emotion: Optional[str] = None
    tertiary_confidence: Optional[float] = None
    consistency: str = "high"
    dominant_source: str = "voice"
    validation_applied: bool = False

@dataclass
class FormattedEmotion:
    """–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —ç–º–æ—Ü–∏—è –¥–ª—è –ò–ò"""
    emotion_prompt: str
    complexity: EmotionComplexity
    context_hints: List[str]
    metadata: Dict[str, any]

class EmotionFormatter:
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä —ç–º–æ—Ü–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤"""
    
    def __init__(self):
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        self.complexity_thresholds = {
            "simple": 0.8,    # –û–¥–Ω–∞ —ç–º–æ—Ü–∏—è > 80%
            "medium": 0.6,    # –î–≤–µ —ç–º–æ—Ü–∏–∏ > 60%
            "complex": 0.4    # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏ –∏–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
        }
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
        self.context_hints = {
            "mixed_feelings": [
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç —Å–º–µ—à–∞–Ω–Ω—ã–µ —á—É–≤—Å—Ç–≤–∞",
                "–û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–∞–∑–Ω—ã–µ —ç–º–æ—Ü–∏–∏",
                "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–µ –∏ –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–æ–µ"
            ],
            "voice_text_conflict": [
                "–ì–æ–ª–æ—Å –∏ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥–∞—é—Ç —Ä–∞–∑–Ω—ã–µ —ç–º–æ—Ü–∏–∏",
                "–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫—Ä—ã–≤–∞–µ—Ç –∏—Å—Ç–∏–Ω–Ω—ã–µ —á—É–≤—Å—Ç–≤–∞",
                "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –≥–æ–ª–æ—Å–æ–º –∏ —Å–ª–æ–≤–∞–º–∏"
            ],
            "low_confidence": [
                "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ",
                "–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —ç–º–æ—Ü–∏–π",
                "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"
            ],
            "validation_applied": [
                "–≠–º–æ—Ü–∏–∏ –±—ã–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã",
                "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —á–µ—Ä–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏—é",
                "–í—ã—Å–æ–∫–∞—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
            ],
            "neutral_dominant": [
                "–ü—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø–æ–∫–æ–µ–Ω –∏ —É—Ä–∞–≤–Ω–æ–≤–µ—à–µ–Ω",
                "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —è—Ä–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏"
            ]
        }
        
        # –®–∞–±–ª–æ–Ω—ã –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        self.prompt_templates = {
            EmotionComplexity.SIMPLE: {
                "template": "–≠–º–æ—Ü–∏—è: {emotion} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%})",
                "description": "–ü—Ä–æ—Å—Ç–∞—è —ç–º–æ—Ü–∏—è —Å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é"
            },
            EmotionComplexity.MEDIUM: {
                "template": "–≠–º–æ—Ü–∏–∏: {primary_emotion} ({primary_confidence:.1%}) + {secondary_emotion} ({secondary_confidence:.1%})",
                "description": "–î–≤–µ —ç–º–æ—Ü–∏–∏ —Å —Ä–∞–∑–Ω–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é"
            },
            EmotionComplexity.COMPLEX: {
                "template": "–°–ª–æ–∂–Ω–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {primary_emotion} ({primary_confidence:.1%}), {secondary_emotion} ({secondary_confidence:.1%}), {tertiary_emotion} ({tertiary_confidence:.1%})",
                "description": "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏ –∏–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã"
            }
        }
    
    def format_emotions_for_ai(self, emotion_data: EmotionData) -> FormattedEmotion:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ò–ò"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        complexity = self._calculate_complexity(emotion_data)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
        emotion_prompt = self._create_emotion_prompt(emotion_data, complexity)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        context_hints = self._generate_context_hints(emotion_data, complexity)
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = self._create_metadata(emotion_data, complexity)
        
        return FormattedEmotion(
            emotion_prompt=emotion_prompt,
            complexity=complexity,
            context_hints=context_hints,
            metadata=metadata
        )
    
    def _calculate_complexity(self, emotion_data: EmotionData) -> EmotionComplexity:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        
        primary_confidence = emotion_data.primary_confidence
        secondary_confidence = emotion_data.secondary_confidence or 0.0
        tertiary_confidence = emotion_data.tertiary_confidence or 0.0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —ç–º–æ—Ü–∏–π
        has_secondary = emotion_data.secondary_emotion is not None
        has_tertiary = emotion_data.tertiary_emotion is not None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
        has_conflicts = self._has_emotional_conflicts(emotion_data)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        if has_conflicts or (has_secondary and has_tertiary):
            return EmotionComplexity.COMPLEX
        elif has_secondary and secondary_confidence > self.complexity_thresholds["medium"]:
            return EmotionComplexity.MEDIUM
        elif primary_confidence > self.complexity_thresholds["simple"]:
            return EmotionComplexity.SIMPLE
        else:
            return EmotionComplexity.MEDIUM
    
    def _has_emotional_conflicts(self, emotion_data: EmotionData) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
        
        # –ú–∞–ø–ø–∏–Ω–≥ —ç–º–æ—Ü–∏–π –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        emotion_categories = {
            "—Ä–∞–¥–æ—Å—Ç—å": "positive", "—ç–Ω—Ç—É–∑–∏–∞–∑–º": "positive", "—É–¥–∏–≤–ª–µ–Ω–∏–µ": "positive",
            "–≥—Ä—É—Å—Ç—å": "negative", "–∑–ª–æ—Å—Ç—å": "negative", "—Å—Ç—Ä–∞—Ö": "negative", "–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ": "negative",
            "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è": "neutral", "—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ": "neutral"
        }
        
        emotions = [emotion_data.primary_emotion]
        if emotion_data.secondary_emotion:
            emotions.append(emotion_data.secondary_emotion)
        if emotion_data.tertiary_emotion:
            emotions.append(emotion_data.tertiary_emotion)
        
        categories = [emotion_categories.get(emotion, "neutral") for emotion in emotions]
        unique_categories = set(categories)
        
        # –ö–æ–Ω—Ñ–ª–∏–∫—Ç –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        return len(unique_categories) > 2 or (
            "positive" in unique_categories and "negative" in unique_categories
        )
    
    def _create_emotion_prompt(self, emotion_data: EmotionData, complexity: EmotionComplexity) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò"""
        
        template_info = self.prompt_templates[complexity]
        
        if complexity == EmotionComplexity.SIMPLE:
            return template_info["template"].format(
                emotion=emotion_data.primary_emotion,
                confidence=emotion_data.primary_confidence
            )
        
        elif complexity == EmotionComplexity.MEDIUM:
            secondary_emotion = emotion_data.secondary_emotion or "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è"
            secondary_confidence = emotion_data.secondary_confidence or 0.0
            
            return template_info["template"].format(
                primary_emotion=emotion_data.primary_emotion,
                primary_confidence=emotion_data.primary_confidence,
                secondary_emotion=secondary_emotion,
                secondary_confidence=secondary_confidence
            )
        
        else:  # COMPLEX
            secondary_emotion = emotion_data.secondary_emotion or "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è"
            secondary_confidence = emotion_data.secondary_confidence or 0.0
            tertiary_emotion = emotion_data.tertiary_emotion or "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è"
            tertiary_confidence = emotion_data.tertiary_confidence or 0.0
            
            return template_info["template"].format(
                primary_emotion=emotion_data.primary_emotion,
                primary_confidence=emotion_data.primary_confidence,
                secondary_emotion=secondary_emotion,
                secondary_confidence=secondary_confidence,
                tertiary_emotion=tertiary_emotion,
                tertiary_confidence=tertiary_confidence
            )
    
    def _generate_context_hints(self, emotion_data: EmotionData, complexity: EmotionComplexity) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏"""
        
        hints = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ—à–∞–Ω–Ω—ã–µ —á—É–≤—Å—Ç–≤–∞
        if complexity == EmotionComplexity.COMPLEX:
            hints.extend(self.context_hints["mixed_feelings"])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –º–µ–∂–¥—É –≥–æ–ª–æ—Å–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º
        if emotion_data.consistency == "low":
            hints.extend(self.context_hints["voice_text_conflict"])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏–∑–∫—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        if emotion_data.primary_confidence < 0.6:
            hints.extend(self.context_hints["low_confidence"])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if emotion_data.validation_applied:
            hints.extend(self.context_hints["validation_applied"])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if emotion_data.primary_emotion == "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è":
            hints.extend(self.context_hints["neutral_dominant"])
        
        return hints
    
    def _create_metadata(self, emotion_data: EmotionData, complexity: EmotionComplexity) -> Dict[str, any]:
        """–°–æ–∑–¥–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–º–æ—Ü–∏–π"""
        
        return {
            "complexity": complexity.value,
            "primary_emotion": emotion_data.primary_emotion,
            "primary_confidence": emotion_data.primary_confidence,
            "secondary_emotion": emotion_data.secondary_emotion,
            "secondary_confidence": emotion_data.secondary_confidence,
            "tertiary_emotion": emotion_data.tertiary_emotion,
            "tertiary_confidence": emotion_data.tertiary_confidence,
            "consistency": emotion_data.consistency,
            "dominant_source": emotion_data.dominant_source,
            "validation_applied": emotion_data.validation_applied,
            "has_conflicts": self._has_emotional_conflicts(emotion_data),
            "emotion_count": self._count_emotions(emotion_data)
        }
    
    def _count_emotions(self, emotion_data: EmotionData) -> int:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–æ—Ü–∏–π"""
        count = 1  # primary –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å
        
        if emotion_data.secondary_emotion:
            count += 1
        if emotion_data.tertiary_emotion:
            count += 1
        
        return count
    
    def create_adaptive_prompt(self, formatted_emotion: FormattedEmotion, base_prompt: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —ç–º–æ—Ü–∏–π"""
        
        # –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        prompt_parts = [base_prompt]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        prompt_parts.append(f"\n–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {formatted_emotion.emotion_prompt}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        if formatted_emotion.context_hints:
            prompt_parts.append(f"\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏:")
            for hint in formatted_emotion.context_hints:
                prompt_parts.append(f"- {hint}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        if formatted_emotion.complexity == EmotionComplexity.SIMPLE:
            prompt_parts.append(f"\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç —á–µ—Ç–∫—É—é —ç–º–æ—Ü–∏—é. –û—Ç–≤–µ—á–∞–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.")
        
        elif formatted_emotion.complexity == EmotionComplexity.MEDIUM:
            prompt_parts.append(f"\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç —Å–º–µ—à–∞–Ω–Ω—ã–µ —á—É–≤—Å—Ç–≤–∞. –£—á—Ç–∏—Ç–µ –æ–±–µ —ç–º–æ—Ü–∏–∏ –≤ –æ—Ç–≤–µ—Ç–µ.")
        
        else:  # COMPLEX
            prompt_parts.append(f"\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –°–ª–æ–∂–Ω–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ë—É–¥—å—Ç–µ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∏ —ç–º–ø–∞—Ç–∏—á–Ω—ã.")
        
        return "\n".join(prompt_parts)
    
    def format_for_memory_storage(self, formatted_emotion: FormattedEmotion) -> Dict[str, any]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏"""
        
        return {
            "emotion_summary": formatted_emotion.emotion_prompt,
            "complexity": formatted_emotion.complexity.value,
            "context_hints": formatted_emotion.context_hints,
            "metadata": formatted_emotion.metadata,
            "formatted_at": "2025-09-29T18:00:00Z"  # –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å datetime.now().isoformat()
        }
    
    def get_formatter_stats(self) -> Dict[str, any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞"""
        return {
            "complexity_thresholds": self.complexity_thresholds,
            "context_hints_categories": list(self.context_hints.keys()),
            "prompt_templates_count": len(self.prompt_templates),
            "supported_complexities": [c.value for c in EmotionComplexity]
        }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def test_emotion_formatter():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞ —ç–º–æ—Ü–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä —ç–º–æ—Ü–∏–π...")
    
    formatter = EmotionFormatter()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        {
            "name": "–ü—Ä–æ—Å—Ç–∞—è —ç–º–æ—Ü–∏—è",
            "data": EmotionData(
                primary_emotion="—Ä–∞–¥–æ—Å—Ç—å",
                primary_confidence=0.95,
                consistency="high",
                dominant_source="voice"
            )
        },
        {
            "name": "–°–º–µ—à–∞–Ω–Ω—ã–µ —á—É–≤—Å—Ç–≤–∞",
            "data": EmotionData(
                primary_emotion="—Ä–∞–¥–æ—Å—Ç—å",
                primary_confidence=0.70,
                secondary_emotion="–≥—Ä—É—Å—Ç—å",
                secondary_confidence=0.60,
                consistency="medium",
                dominant_source="voice"
            )
        },
        {
            "name": "–°–ª–æ–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
            "data": EmotionData(
                primary_emotion="—Ä–∞–¥–æ—Å—Ç—å",
                primary_confidence=0.50,
                secondary_emotion="–≥—Ä—É—Å—Ç—å",
                secondary_confidence=0.45,
                tertiary_emotion="—Å—Ç—Ä–∞—Ö",
                tertiary_confidence=0.40,
                consistency="low",
                dominant_source="voice",
                validation_applied=True
            )
        }
    ]
    
    for i, case in enumerate(test_cases, 1):
        print(f"\nüìù –¢–µ—Å—Ç {i}: {case['name']}")
        
        formatted = formatter.format_emotions_for_ai(case['data'])
        
        print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {formatted.complexity.value}")
        print(f"   –ü—Ä–æ–º–ø—Ç: {formatted.emotion_prompt}")
        print(f"   –ü–æ–¥—Å–∫–∞–∑–∫–∏: {len(formatted.context_hints)}")
        
        if formatted.context_hints:
            for hint in formatted.context_hints:
                print(f"     - {hint}")
        
        # –¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        base_prompt = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞–π —Å–æ–≤–µ—Ç."
        adaptive_prompt = formatter.create_adaptive_prompt(formatted, base_prompt)
        
        print(f"   –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {len(adaptive_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –¢–µ—Å—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏
        memory_format = formatter.format_for_memory_storage(formatted)
        print(f"   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {len(memory_format['metadata'])} –ø–æ–ª–µ–π")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = formatter.get_formatter_stats()
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞:")
    print(f"   –ü–æ—Ä–æ–≥–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {stats['complexity_thresholds']}")
    print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫: {stats['context_hints_categories']}")
    print(f"   –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {stats['supported_complexities']}")

if __name__ == "__main__":
    test_emotion_formatter()
