#!/usr/bin/env python3
"""
üìù Dostoevsky Text Emotion Service
HTTP —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π –≤ —Ç–µ–∫—Å—Ç–µ —Å –ø–æ–º–æ—â—å—é Dostoevsky
"""

import asyncio
import logging
import sys
import time
from typing import Dict, List, Optional
import json

import uvicorn
from contextlib import asynccontextmanager
from fastapi import FastAPI, HTTPException, Form
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Manage application lifespan"""
    # Startup
    logger.info("[INFO] –ó–∞–ø—É—Å–∫ Dostoevsky Text Emotion Service...")
    await dostoevsky_service.initialize()
    logger.info("[OK] Dostoevsky Text Emotion Service –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    yield
    # Shutdown
    logger.info("[INFO] Dostoevsky Text Emotion Service –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")
    if hasattr(app.state, 'sentiment_analyzer') and app.state.sentiment_analyzer:
        logger.info("[INFO] –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ Dostoevsky...")
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ Dostoevsky (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    logger.info("[INFO] Dostoevsky Text Emotion Service –∑–∞–≤–µ—Ä—à–µ–Ω")

app = FastAPI(
    title="Dostoevsky Text Emotion Service",
    description="–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π –≤ —Ç–µ–∫—Å—Ç–µ —Å –ø–æ–º–æ—â—å—é Dostoevsky",
    version="1.0.0",
    lifespan=lifespan
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
async def root():
    """Root endpoint"""
    try:
        logger.info("[ROOT] –ó–∞–ø—Ä–æ—Å –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É endpoint")
        return {
            "service": "Dostoevsky Text Emotion Service",
            "version": "1.0.0",
            "status": "running",
            "endpoints": [
                "/health",
                "/model-info",
                "/emotions",
                "/analyze",
                "/analyze-json"
            ]
        }
    except Exception as e:
        logger.error(f"[ROOT] –û—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(f"[ROOT] Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=str(e))

class DostoevskyService:
    def __init__(self):
        self.model = None
        self.tokenizer = None
        self.is_initialized = False
        
        # –ú–∞–ø–ø–∏–Ω–≥ —ç–º–æ—Ü–∏–π –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
        self.emotion_mapping = {
            'joy': '—Ä–∞–¥–æ—Å—Ç—å',
            'sadness': '–≥—Ä—É—Å—Ç—å',
            'anger': '–∑–ª–æ—Å—Ç—å',
            'fear': '—Å—Ç—Ä–∞—Ö',
            'surprise': '—É–¥–∏–≤–ª–µ–Ω–∏–µ',
            'neutral': '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è',
            'positive': '—Ä–∞–¥–æ—Å—Ç—å',
            'negative': '–≥—Ä—É—Å—Ç—å',
            'speech': '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è',
            'skip': '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è'
        }
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ Dostoevsky"""
        if self.is_initialized:
            return
        
        logger.info("üìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Dostoevsky –º–æ–¥–µ–ª–∏...")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Dostoevsky
            from dostoevsky.tokenization import RegexTokenizer
            from dostoevsky.models import FastTextSocialNetworkModel
            import os
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º tokenizer
            self.tokenizer = RegexTokenizer()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å Dostoevsky
            model_path = os.path.join(os.path.dirname(__file__), '..', 'models', 'dostoevsky', 'fasttext-social-network-model.bin')
            logger.info(f"[INFO] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏: {model_path}")
            logger.info(f"[INFO] –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(model_path)}")
            
            if os.path.exists(model_path):
                logger.info(f"[INFO] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å Dostoevsky: {model_path}")
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Dostoevsky
                os.environ['DOSTOEVSKY_DATA_PATH'] = os.path.dirname(model_path)
                logger.info(f"[INFO] DOSTOEVSKY_DATA_PATH —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {os.environ.get('DOSTOEVSKY_DATA_PATH')}")
                self.model = FastTextSocialNetworkModel(tokenizer=self.tokenizer)
            else:
                logger.info("[INFO] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –º–æ–¥–µ–ª—å Dostoevsky")
                self.model = FastTextSocialNetworkModel(tokenizer=self.tokenizer)
            
            logger.info("[OK] Dostoevsky –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            self.is_initialized = True
            
        except ImportError as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Dostoevsky: {e}")
            raise HTTPException(
                status_code=500, 
                detail="Dostoevsky –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install dostoevsky"
            )
        except Exception as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
    
    async def analyze_emotions(self, text: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –≤ —Ç–µ–∫—Å—Ç–µ"""
        if not self.is_initialized:
            await self.initialize()
        
        start_time = time.time()
        
        try:
            logger.info(f"[INFO] –í—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: '{text}'")
            logger.info(f"[INFO] –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
            if self.model is None:
                raise Exception("–ú–æ–¥–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            logger.info(f"üîß –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∞–Ω–∞–ª–∏–∑—É: {type(self.model)}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            results = self.model.predict([text], k=5)  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 —ç–º–æ—Ü–∏–π
            logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏: {results}")
            
            # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ—Ü–∏–∏
            emotion_scores = results[0]
            logger.info(f"üìä –°—ã—Ä—ã–µ –æ—Ü–µ–Ω–∫–∏ —ç–º–æ—Ü–∏–π: {emotion_scores}")
            
            # –ù–∞—Ö–æ–¥–∏–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —ç–º–æ—Ü–∏—é
            if emotion_scores:
                dominant_emotion_key = max(emotion_scores.keys(), key=lambda k: emotion_scores[k])
                dominant_emotion = self.emotion_mapping.get(dominant_emotion_key, '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è')
                confidence = float(emotion_scores[dominant_emotion_key])
                logger.info(f"üéØ –î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —ç–º–æ—Ü–∏—è: {dominant_emotion} (–∫–ª—é—á: {dominant_emotion_key}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f})")
            else:
                 # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏–∑ –º–æ–¥–µ–ª–∏
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏–∑ –º–æ–¥–µ–ª–∏
                    if hasattr(self.model, 'predict_proba') and text.strip():
                        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤
                        probas = self.model.predict_proba([text])
                        if len(probas) > 0 and len(probas[0]) > 0:
                            # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–∞–∫ confidence
                            max_proba = float(max(probas[0]))
                            confidence = max_proba if max_proba > 0.1 else 0.1
                            dominant_emotion = '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è'
                            logger.info(f"üéØ –ü–æ–ª—É—á–µ–Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏–∑ –º–æ–¥–µ–ª–∏: {confidence:.3f}")
                        else:
                            confidence = 0.1
                            dominant_emotion = '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è'
                            logger.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                    else:
                        confidence = 0.1
                        dominant_emotion = '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è'
                        logger.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                except Exception as e:
                    confidence = 0.1
                    dominant_emotion = '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è'
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è confidence –∏–∑ –º–æ–¥–µ–ª–∏: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö —ç–º–æ—Ü–∏–π —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
            all_emotions = {}
            for key, score in emotion_scores.items():
                emotion = self.emotion_mapping.get(key, '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è')
                # –ï—Å–ª–∏ —ç–º–æ—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –±–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π score
                if emotion in all_emotions:
                    all_emotions[emotion] = max(all_emotions[emotion], float(score))
                else:
                    all_emotions[emotion] = float(score)
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —ç–º–æ—Ü–∏—è
            if '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è' not in all_emotions:
                all_emotions['–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è'] = 0.1
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
            total = sum(all_emotions.values())
            if total > 0:
                all_emotions = {k: v/total for k, v in all_emotions.items()}
            
            processing_time = time.time() - start_time
            
            result = {
                "emotion": dominant_emotion,
                "confidence": confidence,
                "all_emotions": all_emotions,
                "processing_time": processing_time,
                "text_length": len(text),
                "model_info": {
                    "name": "FastTextSocialNetworkModel",
                    "tokenizer": "RegexTokenizer"
                }
            }
            
            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {processing_time:.3f}—Å")
            logger.info(f"üì§ –ò—Å—Ö–æ–¥—è—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            logger.info(f"üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è —ç–º–æ—Ü–∏—è: {dominant_emotion} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f})")
            return result
            
        except Exception as e:
            import traceback
            error_details = traceback.format_exc()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π: {e}")
            logger.error(f"üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_details}")
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π: {str(e)}")

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "service": "dostoevsky-text-emotion",
        "initialized": dostoevsky_service.is_initialized,
        "model": "FastTextSocialNetworkModel"
    }

@app.get("/emotions")
async def get_available_emotions():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–º–æ—Ü–∏–π"""
    return {
        "emotions": list(dostoevsky_service.emotion_mapping.values()),
        "mapping": dostoevsky_service.emotion_mapping
    }

@app.post("/analyze")
async def analyze_text_emotions(
    text: str = Form(...)
):
    """–ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –≤ —Ç–µ–∫—Å—Ç–µ"""
    if not text.strip():
        raise HTTPException(status_code=400, detail="–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–∏
        result = await dostoevsky_service.analyze_emotions(text)
        
        return JSONResponse(content=result)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/analyze-json")
async def analyze_text_emotions_json(data: dict):
    """–ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –≤ —Ç–µ–∫—Å—Ç–µ (JSON)"""
    text = data.get("text", "")
    if not text.strip():
        raise HTTPException(status_code=400, detail="–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if not dostoevsky_service.is_initialized:
            await dostoevsky_service.initialize()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–∏
        result = await dostoevsky_service.analyze_emotions(text)
        
        return JSONResponse(content=result)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/model-info")
async def get_model_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"""
    if not dostoevsky_service.is_initialized:
        raise HTTPException(status_code=503, detail="–ú–æ–¥–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    return {
        "model_name": "FastTextSocialNetworkModel",
        "tokenizer": "RegexTokenizer",
        "emotion_mapping": dostoevsky_service.emotion_mapping,
        "supported_languages": ["ru", "en"]
    }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
dostoevsky_service = DostoevskyService()

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="Dostoevsky Text Emotion Service")
    parser.add_argument("--host", default="0.0.0.0", help="Host to bind to")
    parser.add_argument("--port", type=int, default=8007, help="Port to bind to")
    parser.add_argument("--workers", type=int, default=1, help="Number of workers")
    
    args = parser.parse_args()
    
    logger.info(f"üìù –ó–∞–ø—É—Å–∫ Dostoevsky Text Emotion Service –Ω–∞ {args.host}:{args.port}")
    
    uvicorn.run(
        "dostoevsky_service:app",
        host=args.host,
        port=args.port,
        workers=args.workers,
        reload=False
    )
